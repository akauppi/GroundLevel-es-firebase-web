 /**
  * @license
  * Copyright 2020 Google LLC
@@ -74,8 +74,16 @@
     ["invalid String merger input" /* INVALID_STRING_MERGER_PARAMETER */]: 'Input for String merger is invalid, contact support team to resolve.',
     ["already initialized" /* ALREADY_INITIALIZED */]: 'Performance can only be initialized once.'
 };
-const ERROR_FACTORY = new ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);
-
+//const ERROR_FACTORY = new ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);
+
+const ERROR_FACTORY = {
+  create(...args) {   // First time here. Replace ourselves
+    const { create } = new ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);
+    ERROR_FACTORY.create = create;
+    return create(...args);
+  }
+}
+
 /**
  * @license
  * Copyright 2020 Google LLC
@@ -92,9 +100,22 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-const consoleLogger = new Logger(SERVICE_NAME);
-consoleLogger.logLevel = LogLevel.INFO;
-
+//const consoleLogger = new Logger(SERVICE_NAME);
+//consoleLogger.logLevel = LogLevel.INFO;
+
+let consoleLogger = {
+  info: _consoleLoggerFirst('info')
+};
+function _consoleLoggerFirst(level) {
+  return (...args) => {
+    const logger = new Logger(SERVICE_NAME);
+    logger.logLevel = LogLevel.INFO;
+
+    consoleLogger= logger;
+    logger[level](...args);
+  }
+}
+
 /**
  * @license
  * Copyright 2020 Google LLC
@@ -1498,8 +1519,24 @@
 function registerPerformance() {
     _registerComponent(new Component('performance-exp', factory, "PUBLIC" /* PUBLIC */));
 }
-registerPerformance();
-registerVersion(name, version);
-
-export { getPerformance, initializePerformance, trace };
-//# sourceMappingURL=index.esm2017.js.map
+//registerPerformance();
+//registerVersion(name, version);
+
+let registered;
+function wrap(f) {
+  return (...args) => {
+    if (!registered) {
+      registerPerformance();
+      registerVersion(name, version);
+      registered = true;
+    }
+    return f(...args);
+  }
+}
+const getPerformanceWrapper = wrap(getPerformance);
+const initializePerformanceWrapper = wrap(initializePerformance);
+
+//export { getPerformance, initializePerformance, trace };
+export { getPerformanceWrapper as getPerformance, initializePerformanceWrapper as initializePerformance, trace };
+
+//# sourceMappingURL=index.esm2017.js.map
